{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_ORDER, SET_ORDERS } from \"../actions/orders\";\nimport Order from \"../../models/order\";\nvar initialState = {\n  orders: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_ORDERS:\n      return {\n        orders: action.orders\n      };\n\n    case ADD_ORDER:\n      var newOrder = new Order(action.orderData.id, action.orderData.items, action.orderData.points, action.orderData.date);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orders: state.orders.concat(newOrder)\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/romfa/Desktop/‏‏‏‏‏‏MakeGood - heb - 1/src/store/reducers/orders.js"],"names":["ADD_ORDER","SET_ORDERS","Order","initialState","orders","state","action","type","newOrder","orderData","id","items","points","date","concat"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,UAApB;AACA,OAAOC,KAAP;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAArB;AAIA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,UAAL;AACE,aAAO;AACLG,QAAAA,MAAM,EAAEE,MAAM,CAACF;AADV,OAAP;;AAGF,SAAKJ,SAAL;AACE,UAAMQ,QAAQ,GAAG,IAAIN,KAAJ,CACfI,MAAM,CAACG,SAAP,CAAiBC,EADF,EAEfJ,MAAM,CAACG,SAAP,CAAiBE,KAFF,EAGfL,MAAM,CAACG,SAAP,CAAiBG,MAHF,EAIfN,MAAM,CAACG,SAAP,CAAiBI,IAJF,CAAjB;AAMA,6CACKR,KADL;AAEED,QAAAA,MAAM,EAAEC,KAAK,CAACD,MAAN,CAAaU,MAAb,CAAoBN,QAApB;AAFV;AAZJ;;AAkBA,SAAOH,KAAP;AACD,CApBD","sourcesContent":["import { ADD_ORDER, SET_ORDERS } from '../actions/orders';\nimport Order from '../../models/order';\n\nconst initialState = {\n  orders: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ORDERS:\n      return {\n        orders: action.orders\n      };\n    case ADD_ORDER:\n      const newOrder = new Order(\n        action.orderData.id,\n        action.orderData.items,\n        action.orderData.points,\n        action.orderData.date\n      );\n      return {\n        ...state,\n        orders: state.orders.concat(newOrder)\n      };\n  }\n\n  return state;\n};\n\n"]},"metadata":{},"sourceType":"module"}