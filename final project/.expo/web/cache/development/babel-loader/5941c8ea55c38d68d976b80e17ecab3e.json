{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_COMMITMENT, SET_COMMITMENTS } from \"../actions/commitments\";\nimport Commitment from \"../../models/commitment\";\nvar initialState = {\n  commitments: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_COMMITMENTS:\n      return {\n        commitments: action.commitments\n      };\n\n    case ADD_COMMITMENT:\n      var newCommitment = new Commitment(action.commitmentData.id, action.commitmentData.items, action.commitmentData.points, action.commitmentData.date);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        commitments: state.commitments.concat(newCommitment)\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/romfa/Desktop/‏‏‏‏‏‏MakeGood - heb - 1/src/store/reducers/commitments.js"],"names":["ADD_COMMITMENT","SET_COMMITMENTS","Commitment","initialState","commitments","state","action","type","newCommitment","commitmentData","id","items","points","date","concat"],"mappings":";;;;;;AAAA,SAASA,cAAT,EAAyBC,eAAzB;AACA,OAAOC,UAAP;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAIA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,eAAL;AACE,aAAO;AACLG,QAAAA,WAAW,EAAEE,MAAM,CAACF;AADf,OAAP;;AAGF,SAAKJ,cAAL;AACE,UAAMQ,aAAa,GAAG,IAAIN,UAAJ,CACpBI,MAAM,CAACG,cAAP,CAAsBC,EADF,EAEpBJ,MAAM,CAACG,cAAP,CAAsBE,KAFF,EAGpBL,MAAM,CAACG,cAAP,CAAsBG,MAHF,EAIpBN,MAAM,CAACG,cAAP,CAAsBI,IAJF,CAAtB;AAMA,6CACKR,KADL;AAEED,QAAAA,WAAW,EAAEC,KAAK,CAACD,WAAN,CAAkBU,MAAlB,CAAyBN,aAAzB;AAFf;AAZJ;;AAkBA,SAAOH,KAAP;AACD,CApBD","sourcesContent":["import { ADD_COMMITMENT, SET_COMMITMENTS } from '../actions/commitments';\nimport Commitment from '../../models/commitment';\n\nconst initialState = {\n  commitments: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_COMMITMENTS:\n      return {\n        commitments: action.commitments\n      };\n    case ADD_COMMITMENT:\n      const newCommitment = new Commitment(\n        action.commitmentData.id,\n        action.commitmentData.items,\n        action.commitmentData.points,\n        action.commitmentData.date\n      );\n      return {\n        ...state,\n        commitments: state.commitments.concat(newCommitment)\n      };\n  }\n\n  return state;\n};\n\n"]},"metadata":{},"sourceType":"module"}