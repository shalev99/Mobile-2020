{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\romfa\\\\Desktop\\\\MakeGood\\\\src\\\\screens\\\\shop\\\\OrdersScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport HeaderButton from \"../../components/UI/HeaderButton\";\nimport OrderItem from \"../../components/shop/OrderItem\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport Colors from \"../../constants/Colors\";\n\nvar OrdersScreen = function OrdersScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var orders = useSelector(function (state) {\n    return state.orders.orders;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    setIsLoading(true);\n    dispatch(ordersActions.fetchOrders()).then(function () {\n      setIsLoading(false);\n    });\n  }, [dispatch]);\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (orders.length === 0) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"No order found, maybe start ordering some products?\"));\n  }\n\n  return React.createElement(FlatList, {\n    data: orders,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: function renderItem(itemData) {\n      return React.createElement(OrderItem, {\n        amount: itemData.item.totalAmount,\n        date: itemData.item.readableDate,\n        items: itemData.item.items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  });\n};\n\nOrdersScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Your Orders',\n    headerLeft: function headerLeft() {\n      return React.createElement(HeaderButtons, {\n        HeaderButtonComponent: HeaderButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, React.createElement(Item, {\n        title: \"Menu\",\n        iconName: Platform.OS === 'android' ? 'md-menu' : 'ios-menu',\n        onPress: function onPress() {\n          navData.navigation.toggleDrawer();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }));\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default OrdersScreen;","map":{"version":3,"sources":["C:/Users/romfa/Desktop/MakeGood/src/screens/shop/OrdersScreen.js"],"names":["React","useEffect","useState","useSelector","useDispatch","HeaderButtons","Item","HeaderButton","OrderItem","ordersActions","Colors","OrdersScreen","props","isLoading","setIsLoading","orders","state","dispatch","fetchOrders","then","styles","centered","primary","length","flex","justifyContent","alignItems","item","id","itemData","totalAmount","readableDate","items","navigationOptions","navData","headerTitle","headerLeft","Platform","OS","navigation","toggleDrawer","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  View,\n  FlatList,\n  Text,\n  Platform,\n  ActivityIndicator,\n  StyleSheet\n} from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\n\nimport HeaderButton from '../../components/UI/HeaderButton';\nimport OrderItem from '../../components/shop/OrderItem';\nimport * as ordersActions from '../../store/actions/orders';\nimport Colors from '../../constants/Colors';\n\nconst OrdersScreen = props => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const orders = useSelector(state => state.orders.orders);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    dispatch(ordersActions.fetchOrders()).then(() => {\n      setIsLoading(false);\n    });\n  }, [dispatch]);\n\n  if (isLoading) {\n    return (\n      <View style={styles.centered}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n      </View>\n    );\n  }\n\n  if (orders.length === 0) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>No order found, maybe start ordering some products?</Text>\n      </View>\n    );\n  }\n\n  return (\n    <FlatList\n      data={orders}\n      keyExtractor={item => item.id}\n      renderItem={itemData => (\n        <OrderItem\n          amount={itemData.item.totalAmount}\n          date={itemData.item.readableDate}\n          items={itemData.item.items}\n        />\n      )}\n    />\n  );\n};\n\nOrdersScreen.navigationOptions = navData => {\n  return {\n    headerTitle: 'Your Orders',\n    headerLeft: () =>\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Menu\"\n          iconName={Platform.OS === 'android' ? 'md-menu' : 'ios-menu'}\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n  };\n};\n\nconst styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nexport default OrdersScreen;\n"]},"metadata":{},"sourceType":"module"}