{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Commitment from \"../../models/commitment\";\nexport var ADD_COMMITMENT = 'ADD_COMMITMENT';\nexport var SET_COMMITMENTS = 'SET_COMMITMENTS';\nexport var fetchCommitments = function fetchCommitments() {\n  return function _callee(dispatch, getState) {\n    var userId, response, resData, loadedCommitments, key;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userId = getState().auth.userId;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://makegood-728b4.firebaseio.com/commitments/\" + userId + \".json\"));\n\n          case 4:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('משהו השתבש...');\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            resData = _context.sent;\n            loadedCommitments = [];\n\n            for (key in resData) {\n              loadedCommitments.push(new Commitment(key, resData[key].commitmentItems, new Date(resData[key].date)));\n            }\n\n            dispatch({\n              type: SET_COMMITMENTS,\n              commitments: loadedCommitments\n            });\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 15]], Promise);\n  };\n};\nexport var addCommitment = function addCommitment(commitmentItems) {\n  return function _callee2(dispatch, getState) {\n    var token, userId, date, response, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.userId;\n            date = new Date();\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch(\"https://makegood-728b4.firebaseio.com/commitments/\" + userId + \".json?auth=\" + token, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                commitmentItems: commitmentItems,\n                points: 30,\n                date: date.toISOString()\n              })\n            }));\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error('משהו השתבש...');\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            resData = _context2.sent;\n            dispatch({\n              type: ADD_COMMITMENT,\n              commitmentData: {\n                id: resData.name,\n                items: commitmentItems,\n                points: 30,\n                date: date\n              }\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/romfa/Desktop/‏‏‏‏‏‏MakeGood - heb - 1/src/store/actions/commitments.js"],"names":["Commitment","ADD_COMMITMENT","SET_COMMITMENTS","fetchCommitments","dispatch","getState","userId","auth","fetch","response","ok","Error","json","resData","loadedCommitments","key","push","commitmentItems","Date","date","type","commitments","addCommitment","token","method","headers","body","JSON","stringify","points","toISOString","commitmentData","id","name","items"],"mappings":";AAAA,OAAOA,UAAP;AAEA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,SAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUD,QAAQ,GAAGE,IAAX,CAAgBD,MAD1B;AAAA;AAAA;AAAA,6CAGoBE,KAAK,wDAC2BF,MAD3B,WAHzB;;AAAA;AAGGG,YAAAA,QAHH;;AAAA,gBAOEA,QAAQ,CAACC,EAPX;AAAA;AAAA;AAAA;;AAAA,kBAQK,IAAIC,KAAJ,CAAU,eAAV,CARL;;AAAA;AAAA;AAAA,6CAWmBF,QAAQ,CAACG,IAAT,EAXnB;;AAAA;AAWGC,YAAAA,OAXH;AAYGC,YAAAA,iBAZH,GAYuB,EAZvB;;AAcH,iBAAWC,GAAX,IAAkBF,OAAlB,EAA2B;AACzBC,cAAAA,iBAAiB,CAACE,IAAlB,CACE,IAAIhB,UAAJ,CACEe,GADF,EAEEF,OAAO,CAACE,GAAD,CAAP,CAAaE,eAFf,EAGE,IAAIC,IAAJ,CAASL,OAAO,CAACE,GAAD,CAAP,CAAaI,IAAtB,CAHF,CADF;AAOD;;AACDf,YAAAA,QAAQ,CAAC;AAAEgB,cAAAA,IAAI,EAAElB,eAAR;AAAyBmB,cAAAA,WAAW,EAAEP;AAAtC,aAAD,CAAR;AAvBG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA4BD,CA7BM;AA+BP,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACL,eAAD,EAAqB;AAChD,SAAO,kBAAOb,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCkB,YAAAA,KADD,GACSlB,QAAQ,GAAGE,IAAX,CAAgBgB,KADzB;AAECjB,YAAAA,MAFD,GAEUD,QAAQ,GAAGE,IAAX,CAAgBD,MAF1B;AAGCa,YAAAA,IAHD,GAGQ,IAAID,IAAJ,EAHR;AAAA;AAAA,6CAIkBV,KAAK,wDAC2BF,MAD3B,mBAC+CiB,KAD/C,EAE1B;AACEC,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFX;AAKEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,gBAAAA,eAAe,EAAfA,eADmB;AAEnBY,gBAAAA,MAAM,EAAC,EAFY;AAGnBV,gBAAAA,IAAI,EAAEA,IAAI,CAACW,WAAL;AAHa,eAAf;AALR,aAF0B,CAJvB;;AAAA;AAICrB,YAAAA,QAJD;;AAAA,gBAmBAA,QAAQ,CAACC,EAnBT;AAAA;AAAA;AAAA;;AAAA,kBAoBG,IAAIC,KAAJ,CAAU,eAAV,CApBH;;AAAA;AAAA;AAAA,6CAuBiBF,QAAQ,CAACG,IAAT,EAvBjB;;AAAA;AAuBCC,YAAAA,OAvBD;AAyBLT,YAAAA,QAAQ,CAAC;AACPgB,cAAAA,IAAI,EAAEnB,cADC;AAEP8B,cAAAA,cAAc,EAAE;AACdC,gBAAAA,EAAE,EAAEnB,OAAO,CAACoB,IADE;AAEdC,gBAAAA,KAAK,EAAEjB,eAFO;AAGdY,gBAAAA,MAAM,EAAC,EAHO;AAIdV,gBAAAA,IAAI,EAAEA;AAJQ;AAFT,aAAD,CAAR;;AAzBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAmCD,CApCM","sourcesContent":["import Commitment from '../../models/commitment';\n\nexport const ADD_COMMITMENT = 'ADD_COMMITMENT';\nexport const SET_COMMITMENTS = 'SET_COMMITMENTS';\n\nexport const fetchCommitments = () => {\n  return async (dispatch, getState) => {\n    const userId = getState().auth.userId;\n    try {\n      const response = await fetch(\n        `https://makegood-728b4.firebaseio.com/commitments/${userId}.json`\n      );\n      \n      if (!response.ok) {\n        throw new Error('משהו השתבש...');\n      }\n\n      const resData = await response.json();\n      const loadedCommitments = [];\n\n      for (const key in resData) {\n        loadedCommitments.push(\n          new Commitment(\n            key,\n            resData[key].commitmentItems,\n            new Date(resData[key].date)\n          )\n        );\n      }\n      dispatch({ type: SET_COMMITMENTS, commitments: loadedCommitments });\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const addCommitment = (commitmentItems) => {\n  return async (dispatch, getState) => {\n    const token = getState().auth.token;\n    const userId = getState().auth.userId;\n    const date = new Date();\n    const response = await fetch(\n      `https://makegood-728b4.firebaseio.com/commitments/${userId}.json?auth=${token}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          commitmentItems,\n          points:30,\n          date: date.toISOString()\n        })\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error('משהו השתבש...');\n    }\n\n    const resData = await response.json();\n\n    dispatch({\n      type: ADD_COMMITMENT,\n      commitmentData: {\n        id: resData.name,\n        items: commitmentItems,\n        points:30,\n        date: date\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}