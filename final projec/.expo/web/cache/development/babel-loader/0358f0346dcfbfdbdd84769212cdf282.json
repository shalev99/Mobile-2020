{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var LOGOUT = 'LOGOUT';\nvar timer;\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyA5ETv9Brbgz7DqOz9NkLEPQJJAt5JQVNw', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n\n            if (errorId === 'EMAIL_EXISTS') {\n              message = 'This email exists already!';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nconsole.log();\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyA5ETv9Brbgz7DqOz9NkLEPQJJAt5JQVNw', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n\n            if (errorId === 'EMAIL_NOT_FOUND') {\n              message = 'This email could not be found!';\n            } else if (errorId === 'INVALID_PASSWORD') {\n              message = 'This password is not valid!';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context2.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      if (expirationTime > 60000) {\n          console.log(\"set new exp:\" + (expirationTime - 60000));\n          dispatch(setLogoutTimer(expirationTime - 60000));\n        } else {\n        console.log('logout');\n        dispatch(logout());\n      }\n    }, 60000);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["C:/Users/romfa/Desktop/MakeGood/src/store/actions/auth.js"],"names":["AUTHENTICATE","LOGOUT","timer","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","type","signup","email","password","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","resData","console","log","localId","idToken","parseInt","expiresIn","expirationDate","Date","getTime","saveDataToStorage","login","logout","clearLogoutTimer","AsyncStorage","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":";;AAIA,OAAO,IAAMA,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,MAAM,GAAG,QAAf;AAEP,IAAIC,KAAJ;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAASC,KAAT,EAAgBC,UAAhB,EAA+B;AACzD,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACC,cAAc,CAACF,UAAD,CAAf,CAAR;AACAC,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAET,YAAR;AAAsBI,MAAAA,MAAM,EAAEA,MAA9B;AAAsCC,MAAAA,KAAK,EAAEA;AAA7C,KAAD,CAAR;AACD,GAHD;AAID,CALM;AAQP,OAAO,IAAMK,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO,iBAAML,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBM,KAAK,CAC1B,uGAD0B,EAE1B;AACEC,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFX;AAKEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,gBAAAA,KAAK,EAAEA,KADY;AAEnBC,gBAAAA,QAAQ,EAAEA,QAFS;AAGnBO,gBAAAA,iBAAiB,EAAE;AAHA,eAAf;AALR,aAF0B,CADvB;;AAAA;AACCC,YAAAA,QADD;;AAAA,gBAgBAA,QAAQ,CAACC,EAhBT;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAiBwBD,QAAQ,CAACE,IAAT,EAjBxB;;AAAA;AAiBGC,YAAAA,YAjBH;AAkBGC,YAAAA,OAlBH,GAkBaD,YAAY,CAACE,KAAb,CAAmBC,OAlBhC;AAmBCA,YAAAA,OAnBD,GAmBW,uBAnBX;;AAoBH,gBAAIF,OAAO,KAAK,cAAhB,EAAgC;AAC9BE,cAAAA,OAAO,GAAG,4BAAV;AACD;;AAtBE,kBAuBG,IAAIC,KAAJ,CAAUD,OAAV,CAvBH;;AAAA;AAAA;AAAA,6CA0BiBN,QAAQ,CAACE,IAAT,EA1BjB;;AAAA;AA0BCM,YAAAA,OA1BD;AA2BLC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACArB,YAAAA,QAAQ,CACNJ,YAAY,CACVyB,OAAO,CAACG,OADE,EAEVH,OAAO,CAACI,OAFE,EAGVC,QAAQ,CAACL,OAAO,CAACM,SAAT,CAAR,GAA8B,IAHpB,CADN,CAAR;AAOMC,YAAAA,cAnCD,GAmCkB,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,QAAQ,CAACL,OAAO,CAACM,SAAT,CAAR,GAA8B,IADhC,CAnClB;AAsCLI,YAAAA,iBAAiB,CAACV,OAAO,CAACI,OAAT,EAAkBJ,OAAO,CAACG,OAA1B,EAAmCI,cAAnC,CAAjB;;AAtCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwCD,CAzCM;AA0CPN,OAAO,CAACC,GAAR;AAEA,OAAO,IAAMS,KAAK,GAAG,SAARA,KAAQ,CAAC5B,KAAD,EAAQC,QAAR,EAAqB;AACtC,SAAO,kBAAML,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBM,KAAK,CAC1B,mHAD0B,EAE1B;AACEC,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFX;AAKEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,gBAAAA,KAAK,EAAEA,KADY;AAEnBC,gBAAAA,QAAQ,EAAEA,QAFS;AAGnBO,gBAAAA,iBAAiB,EAAE;AAHA,eAAf;AALR,aAF0B,CADvB;;AAAA;AACCC,YAAAA,QADD;;AAAA,gBAgBAA,QAAQ,CAACC,EAhBT;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAiBwBD,QAAQ,CAACE,IAAT,EAjBxB;;AAAA;AAiBGC,YAAAA,YAjBH;AAkBGC,YAAAA,OAlBH,GAkBaD,YAAY,CAACE,KAAb,CAAmBC,OAlBhC;AAmBCA,YAAAA,OAnBD,GAmBW,uBAnBX;;AAoBH,gBAAIF,OAAO,KAAK,iBAAhB,EAAmC;AACjCE,cAAAA,OAAO,GAAG,gCAAV;AACD,aAFD,MAEO,IAAIF,OAAO,KAAK,kBAAhB,EAAoC;AACzCE,cAAAA,OAAO,GAAG,6BAAV;AACD;;AAxBE,kBAyBG,IAAIC,KAAJ,CAAUD,OAAV,CAzBH;;AAAA;AAAA;AAAA,6CA4BiBN,QAAQ,CAACE,IAAT,EA5BjB;;AAAA;AA4BCM,YAAAA,OA5BD;AA6BLC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACArB,YAAAA,QAAQ,CACNJ,YAAY,CACVyB,OAAO,CAACG,OADE,EAEVH,OAAO,CAACI,OAFE,EAGVC,QAAQ,CAACL,OAAO,CAACM,SAAT,CAAR,GAA8B,IAHpB,CADN,CAAR;AAOMC,YAAAA,cArCD,GAqCkB,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,QAAQ,CAACL,OAAO,CAACM,SAAT,CAAR,GAA8B,IADhC,CArClB;AAwCLI,YAAAA,iBAAiB,CAACV,OAAO,CAACI,OAAT,EAAkBJ,OAAO,CAACG,OAA1B,EAAmCI,cAAnC,CAAjB;;AAxCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0CD,CA3CI;AA6CL,OAAO,IAAMK,MAAM,GAAG,SAATA,MAAS,GAAM;AAC1BC,EAAAA,gBAAgB;AAChBC,EAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,SAAO;AAAElC,IAAAA,IAAI,EAAER;AAAR,GAAP;AACD,CAJM;;AAMP,IAAMwC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,MAAIvC,KAAJ,EAAW;AACT0C,IAAAA,YAAY,CAAC1C,KAAD,CAAZ;AACD;AACF,CAJD;;AAaA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAqC,cAAc,EAAI;AACvC,SAAO,UAAAtC,QAAQ,EAAI;AACjBL,IAAAA,KAAK,GAAG4C,UAAU,CAAC,YAAM;AACrB,UAAID,cAAc,GAAC,KAAnB,EACA;AACIhB,UAAAA,OAAO,CAACC,GAAR,mBAA2Be,cAAc,GAAC,KAA1C;AACAtC,UAAAA,QAAQ,CAACC,cAAc,CAACqC,cAAc,GAAC,KAAhB,CAAf,CAAR;AACH,SAJD,MAMA;AACIhB,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAvB,QAAAA,QAAQ,CAACiC,MAAM,EAAP,CAAR;AACH;AACJ,KAXiB,EAWf,KAXe,CAAlB;AAYD,GAbD;AAcD,CAfD;;AAiBA,IAAMF,iBAAiB,GAAG,SAApBA,iBAAoB,CAACjC,KAAD,EAAQD,MAAR,EAAgB+B,cAAhB,EAAmC;AAC3DO,EAAAA,YAAY,CAACK,OAAb,CACE,UADF,EAEE9B,IAAI,CAACC,SAAL,CAAe;AACbb,IAAAA,KAAK,EAAEA,KADM;AAEbD,IAAAA,MAAM,EAAEA,MAFK;AAGb4C,IAAAA,UAAU,EAAEb,cAAc,CAACc,WAAf;AAHC,GAAf,CAFF;AAQD,CATD","sourcesContent":["import { AsyncStorage } from 'react-native';\n\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\nexport const AUTHENTICATE = 'AUTHENTICATE';\nexport const LOGOUT = 'LOGOUT';\n\nlet timer;\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return dispatch => {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\n\nexport const signup = (email, password) => {\n  return async dispatch => {\n    const response = await fetch(\n      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyA5ETv9Brbgz7DqOz9NkLEPQJJAt5JQVNw',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          returnSecureToken: true\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = 'Something went wrong!';\n      if (errorId === 'EMAIL_EXISTS') {\n        message = 'This email exists already!';\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\nconsole.log()\n\nexport const login = (email, password) => {\n    return async dispatch => {\n      const response = await fetch(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyA5ETv9Brbgz7DqOz9NkLEPQJJAt5JQVNw',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password,\n            returnSecureToken: true\n          })\n        }\n      );\n  \n      if (!response.ok) {\n        const errorResData = await response.json();\n        const errorId = errorResData.error.message;\n        let message = 'Something went wrong!';\n        if (errorId === 'EMAIL_NOT_FOUND') {\n          message = 'This email could not be found!';\n        } else if (errorId === 'INVALID_PASSWORD') {\n          message = 'This password is not valid!';\n        }\n        throw new Error(message);\n      }\n  \n      const resData = await response.json();\n      console.log(resData);\n      dispatch(\n        authenticate(\n          resData.localId,\n          resData.idToken,\n          parseInt(resData.expiresIn) * 1000\n        )\n      );\n      const expirationDate = new Date(\n        new Date().getTime() + parseInt(resData.expiresIn) * 1000\n      );\n      saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n    };\n  };\n\n  export const logout = () => {\n    clearLogoutTimer();\n    AsyncStorage.removeItem('userData');\n    return { type: LOGOUT };\n  };\n  \n  const clearLogoutTimer = () => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n  };\n  \n  // const setLogoutTimer = expirationTime => {\n  //   return dispatch => {\n  //     timer = setTimeout(() => {\n  //       dispatch(logout());\n  //     }, expirationTime);\n  //   };\n  // };\n  const setLogoutTimer = expirationTime => { \n    return dispatch => {\n      timer = setTimeout(() => {\n          if (expirationTime>60000) //1 minute\n          {\n              console.log(`set new exp:${expirationTime-60000}`);\n              dispatch(setLogoutTimer(expirationTime-60000));\n          }\n          else\n          {\n              console.log('logout');\n              dispatch(logout());\n          }\n      }, 60000); \n    };\n  };\n\n  const saveDataToStorage = (token, userId, expirationDate) => {\n    AsyncStorage.setItem(\n      'userData',\n      JSON.stringify({\n        token: token,\n        userId: userId,\n        expiryDate: expirationDate.toISOString()\n      })\n    );\n  };\n  "]},"metadata":{},"sourceType":"module"}