{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, { useReducer, useEffect } from 'react';\n// import { View, Text, TextInput, StyleSheet } from 'react-native';\n\n// const INPUT_CHANGE = 'INPUT_CHANGE';\n// const INPUT_BLUR = 'INPUT_BLUR';\n\n// const inputReducer = (state, action) => {\n//   switch (action.type) {\n//     case INPUT_CHANGE:\n//       return {\n//         ...state,\n//         value: action.value,\n//         isValid: action.isValid\n//       };\n//     case INPUT_BLUR:\n//       return {\n//         ...state,\n//         touched: true\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// const Input = props => {\n//   const [inputState, dispatch] = useReducer(inputReducer, {\n//     value: props.initialValue ? props.initialValue : '',\n//     isValid: props.initiallyValid,\n//     touched: false\n//   });\n\n//   const { onInputChange, id } = props;\n\n//   useEffect(() => {\n//     if (inputState.touched) {\n//       onInputChange(id, inputState.value, inputState.isValid);\n//     }\n//   }, [inputState, onInputChange, id]);\n\n//   const textChangeHandler = text => {\n//     const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     let isValid = true;\n//     if (props.required && text.trim().length === 0) {\n//       isValid = false;\n//     }\n//     if (props.email && !emailRegex.test(text.toLowerCase())) {\n//       isValid = false;\n//     }\n//     if (props.min != null && +text < props.min) {\n//       isValid = false;\n//     }\n//     if (props.max != null && +text > props.max) {\n//       isValid = false;\n//     }\n//     if (props.minLength != null && text.length < props.minLength) {\n//       isValid = false;\n//     }\n//     dispatch({ type: INPUT_CHANGE, value: text, isValid: isValid });\n//   };\n\n//   const lostFocusHandler = () => {\n//     dispatch({ type: INPUT_BLUR });\n//   };\n\n//   return (\n//     <View style={styles.formControl}>\n//       <Text style={styles.label}>{props.label}</Text>\n//       <TextInput\n//         {...props}\n//         style={styles.input}\n//         value={inputState.value}\n//         onChangeText={textChangeHandler}\n//         onBlur={lostFocusHandler}\n//       />\n//       {!inputState.isValid && inputState.touched && (\n//         <View style={styles.errorContainer}>\n//           <Text style={styles.errorText}>{props.errorText}</Text>\n//         </View>\n//       )}\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   formControl: {\n//     width: '100%'\n//   },\n//   label: {\n//     fontWeight: 'bold',\n//     marginVertical: 8\n//   },\n//   input: {\n//     paddingHorizontal: 2,\n//     paddingVertical: 5,\n//     borderBottomColor: '#ccc',\n//     borderBottomWidth: 1\n//   },\n//   errorContainer: {\n//     marginVertical: 5\n//   },\n//   errorText: {\n//     color: 'red',\n//     fontSize: 13\n//   }\n// });\n\n// export default Input;\n"]},"metadata":{},"sourceType":"script"}